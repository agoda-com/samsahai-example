apiVersion: env.samsahai.io/v1beta1
kind: Config
metadata:
  # this must be the same as your team name
  name: example
spec:

  # what components do you want to verify?
  components:
    - name: <service_name>
      chart:
        repository: https://kubernetes-charts.storage.googleapis.com
        name: <chart_name>
      image:
        repository: <service_image_repository>
        pattern: <service_image_tag_pattern>
      source: public-registry

      # overriden values of main service following chart templates
      values: null

      # dependencies of main service
      dependencies:
        - name: <dependencies_service_name>
          image:
            repository: <dependencies_image_repository>
            pattern: <service_image_tag_pattern>
          source: public-registry

  staging:
    # how many times the component should be tested?
    maxRetry: 2
    deployment:
      # how long the staging environment should be ready?
      # support units are either <number>s, <number>m or <number>h
      timeout: 60m

      # how long components cleanup should take?
      # support units are either <number>s, <number>m or <number>h
      componentCleanupTimeout: 20m
      engine: helm3

      # testing flow configuration for running against staging environment
      testRunner:
        # your teamcity build configuration
        teamcity:
          buildTypeID: <your_regression_teamcity_build_type_id>
          branch: <default>

        # how long all testing flows in teamcity should take?
        # support units are either <number>s, <number>m or <number>h
        timeout: 1h

        # polling time to verify finished status in teamcity
        # support units are either <number>s, <number>m or <number>h
        pollingTime: 10s

  # active promotion flow configuration
  activePromotion:
    # how long idle time of old active namespace before destroying?
    # when pre-active switches to active namespace successfully
    # so old active will be destroyed in xx minutes
    # support units are either <number>s, <number>m or <number>h
    tearDownDuration: 30m

    # how long the whole flow of active promotion should take?
    # support units are either <number>s, <number>m or <number>h
    timeout: 3h

    # what is the maximum active promotion histories to store?
    maxHistories: 20

    # deployment flow of active environment configuration
    deployment:
      # how long the active environment should be ready?
      # support units are either <number>s, <number>m or <number>h
      timeout: 60m
      
      # how long components cleanup should take?
      # support units are either <number>s, <number>m or <number>h
      componentCleanupTimeout: 20m
      engine: helm3

      # testing flow configuration for running against active environment
      testRunner:
        # your teamcity build configuration
        teamcity:
          buildTypeID: <your_regression_teamcity_build_type_id>
          branch: <default>

        # how long all testing flows in teamcity should take?
        # support units are either <number>s, <number>m or <number>h
        timeout: 1h

        # polling time to verify finished status in teamcity
        # support units are either <number>s, <number>m or <number>h
        pollingTime: 10s

    # outdated notification to slack channel configuration
    # in case you would like to disable this notification
    # you can remove this parameter
    outdatedNotification:
      # how long of outdated component should be marked as outdated?
      # in case this parameter is not set, component will be marked as outdated
      # in any case if stable version is not equal to desired version
      # support units are either <number>s, <number>m or <number>h
      exceedDuration: 24h

      # calculate outdated duration by excluding weekend (Sat. and Sun.) periods
      excludeWeekendCalculation: true

  # reporting flow configuration
  report:
    slack:
      # if you would like to specify your channel
      # please add our samsahai bot to your channel
      channels:
        - samsahai-dev
      componentUpgrade:
        # how often of sending component upgrade notification within a retry cycle
        # use 'everytime' for sending slack notification in every component upgrade runs
        # use 'retry' for sending slack notification after retry only <default>
        interval: retry

        # a criteria of sending component upgrade notification
        # use 'success' for sending slack notification when component upgrade is success only
        # use 'failure' for sending slack notification when component upgrade is failure only <default>
        # use 'both' for sending slack notification whether component upgrade is success or failure
        criteria: failure

  # values file urls of parent component per environment
  envs:
    # base environment will be applied every running
    base:
      <component_name>:
        - <values_file_url>

    # staging environment will be applied when running component upgrade
    staging:
      <component_name>:
        - <values_file_url>

    # pre-active environment will be applied when doing active promotion
    pre-active:
      <component_name>:
        - <values_file_url>
        
    # active environment will be applied when active promotion passed
    active:
      <component_name>:
        - <values_file_url>s
